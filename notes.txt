Un graphe G = [V,E]
avec V : ensemble des sommets
et E : ensemble des arcs de V.
Chaque arc est valué par un cout (ou longueur) c(e).
Le pb du plus court chemin entre deux sommets i et j
	consiste à trouver un chemin de i à j de coût
	total minimal.

sommetadjacent : std::pair<int,int>
un sommet adjacent j, à un noeud i, est une pair (j, longueur de l'arête (i,j))

vect : vector<sommetadjacent>
liste des sommets adjacents à i

listeadjacence : vector<vec>
C'est un vector indicé par les numéros i=0,1,2,...,n-1 des sommets.
Pour chaque i, le vecteur contient la liste des sommets adjacents à i.

Dans l'algo, cji est la distance (directe) entre les sommets j et i. 0 s'il n'y a pas de chemin.
	-> a lire dans la liste d'adjacence


1) Init de d
2) init de T
3) init de I
4) On change les distances vers voisins du noeud pivot (élement 0 ici).
	Le nouveau pivot est obtenu en supprimant du tas son élement min, soit T[0].
	Le contenu de I change en conséquence



pour chaque element j (tous les noeuds sauf pivot), qui est strictement sup à -1, ..



##
Mon code fonctionne pour le premier graphe (en vérifiant bien 
que les valeurs de T, I et d soient correctes pour chaque itération).
En revanche il donne de mauvais résultats pour le graphe 2.

Etant donné que std::pop_heap rearrange le tableau de manière non voulue (la premiere
	valeur n'est pas toujours la plus petite), alors je déplace moi meme la valeur la 
	plus petite dans T[0].
J'ai pourtant bien utilisé une fonction de comparaison pour former une Min Heap en fonction des valeurs de d.

Je n'utilise pas std::make_heap car T forme de base un tas et que std::pop_heap 
	fait conserver ses propriétés de tas à l'intervalle de valeurs appliquée.

Pensez-vous que l'erreur vient de là ou bien y a-t-il un problème avec mon algorithme ?
##


Comme on compare les T en fonction de leurs valeurs dans d, lorsque d change, alors
	l'organisation du tas aussi.

Quand je mets manuellement la plus petite valeur d de T dans T[0], je compare pas avec valeur d.